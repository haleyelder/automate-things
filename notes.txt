AUTOMATE THE BORING THINGS

CH 1 - BASICS
- expression: programming instructions
- statements:
- exponent (**)
- modulus/remainder (%): 22 % 8 = 6
- division/floored quotient( // ) : 22 // 8 = 2 (lowest they can be divisible)
- floating point (decimals)
- cannot concatenate different data type (int + string)
    - "Alice" + 42 is error but "Alice" *3 = AliceAliceAlice
- print(): output to terminal
- len(): length of string
- input(): ask for user input
- str(), int(), float(): convert to diff data types 

CH 2 - FLOW CONTROL
- boolean: True or False
- comparisons: less than, equal, not, etc
    - == (equal to) evaluates to True when the values on both sides are the same, and != (not equal to) evaluates to True when the two values are different. The == and != operators can actually work with values of any data type.
- not: not True = False
- and: logical AND comparison
- or: logical OR comparison 
- if, else, elif statements
- while loops
- break statements: breaking a whle loop
- continue: program execution goes back to start of loop and run's loop condition
- for loop: for in range 
- range(): range of numbers
    eg: for i in range(5)
    - range(0, 10, 2): 0 to 10, interval 2
    - range(5,-1, -1): decrement 5 to 0, minus 1 each time
- import library/modules (do not overwrite names)

CH 3 - FUNCTIONS
- def funct(): define/create function 
- call: funct() to 'run' it
- pass/passing: putting val in funct to pass to the rest of the funct
- argument: the value being passed to funct
- parameter: variables that have arguments assigned 
- return: value returned from a function
- None: absence of value; null
- end= : replaces newline character with blank string
- sep= : adding in a separator symbol (eg: print('09','12','2016', sep='-') // 09-12-2016)
- call stack: see callstack.py
- local scope: variables within function; can access global vars
- global scope: variables outside of function, used everywhere, cannot access local vars
    - global statement: if global and local called the same var, only global will be used
- try/except: functions to test a flow that may cause an error (divideZero.py)